/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package DLL;

import org.checkerframework.checker.nullness.qual.NonNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.annotation.Nonnull;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

// NPEs here would be considered failures, so no need to guard against them
@SuppressWarnings("ConstantConditions")
class SafeLinkedListTest {

    private SafeLinkedList<Integer> safeLinkedList;

    @BeforeEach
    void setup() {
        safeLinkedList = new SafeLinkedList<Integer>();
    }

    @Test
    void WHEN_ListIsEmpty_AND_linkHeadVal_THEN_UnlinkHeadEqualsVal() {
        safeLinkedList.linkHead(1);

        assertEquals(1, safeLinkedList.unlinkHead().get());
    }

    @Test
    void WHEN_ListIsEmpty_AND_linkTailVal_THEN_UnlinkTailEqualsVal() {
        safeLinkedList.linkTail(5);
        safeLinkedList.linkTail(2);

        assertEquals(2, safeLinkedList.unlinkTail().get());
    }

    @Test
    void GIVEN_list_is_empty_WHEN_val_is_added_THEN_head_and_tail_are_both_val() {
        safeLinkedList.linkHead(1);

        assertEquals(1, safeLinkedList.peekFirst().get().item);
        assertEquals(1, safeLinkedList.peekLast().get().item);

        safeLinkedList = new SafeLinkedList<Integer>();

        safeLinkedList.linkTail(2);

        assertEquals(2, safeLinkedList.peekFirst().get().item);
        assertEquals(2, safeLinkedList.peekLast().get().item);
    }

    @Test
    void WHEN_ListIs1234_AND_unlinkHeadX4_THEN_EachIs1234() {
        safeLinkedList = get1234LL();

        assertEquals(1, safeLinkedList.unlinkHead().get());
        assertEquals(2, safeLinkedList.unlinkHead().get());
        assertEquals(3, safeLinkedList.unlinkHead().get());
        assertEquals(4, safeLinkedList.unlinkHead().get());
    }

    @Test
    void GIVEN_dll_is_empty_WHEN_val_is_unlinked_THEN_unlink_should_return_empty() {
        assertTrue(safeLinkedList.unlinkHead().isEmpty());
        assertTrue(safeLinkedList.unlinkTail().isEmpty());
    }

    @Test
    void GIVEN_dll_is_empty_WHEN_unlinked_THEN_size_should_be_zero() {
        safeLinkedList.unlinkTail();

        assertEquals(0, safeLinkedList.getLength());

        safeLinkedList = new SafeLinkedList<Integer>();
        safeLinkedList.unlinkHead();

        assertEquals(0, safeLinkedList.getLength());
    }

    @Test
    void GIVEN_dll_has_one_val_WHEN_val_is_unlinked_THEN_head_and_tail_are_both_null() {
        safeLinkedList.linkHead(1);

        safeLinkedList.unlinkHead();

        assertEquals(Optional.empty(), safeLinkedList.peekFirst());
        assertEquals(Optional.empty(), safeLinkedList.peekLast());

        safeLinkedList = new SafeLinkedList<Integer>();
        safeLinkedList.linkHead(2);

        safeLinkedList.unlinkTail();

        assertEquals(Optional.empty(), safeLinkedList.peekFirst());
        assertEquals(Optional.empty(), safeLinkedList.peekLast());
    }

    @Test
    void WHEN_a_value_is_unlinked_THEN_it_should_not_be_leaked() {
        safeLinkedList = get1234LL();
        assertEquals(Arrays.asList(1, 2, 3, 4), toArrayList(safeLinkedList));

        safeLinkedList.unlinkTail();

        assertEquals(Arrays.asList(1, 2, 3), toArrayList(safeLinkedList));

        safeLinkedList = get1234LL();

        assertEquals(Arrays.asList(4, 3, 2, 1), toArrayListReversed(safeLinkedList));

        safeLinkedList.unlinkHead();

        assertEquals(Arrays.asList(4, 3, 2), toArrayListReversed(safeLinkedList));
    }

    @Test
    void WHEN_dll_is_populated_and_values_are_unlinked_THEN_head_and_tail_should_be_correct() {
        safeLinkedList = get1234LL();

        assertEquals(1, safeLinkedList.peekFirst().get().item);
        assertEquals(4, safeLinkedList.peekLast().get().item);

        safeLinkedList.unlinkHead();

        assertEquals(2, safeLinkedList.peekFirst().get().item);
        assertEquals(4, safeLinkedList.peekLast().get().item);

        safeLinkedList.unlinkTail();

        assertEquals(2, safeLinkedList.peekFirst().get().item);
        assertEquals(3, safeLinkedList.peekLast().get().item);
    }

    // Utility
    private SafeLinkedList<Integer> get1234LL () {
        SafeLinkedList<Integer> safeLinkedList = new SafeLinkedList();
        safeLinkedList.linkTail(1);
        safeLinkedList.linkTail(2);
        safeLinkedList.linkTail(3);
        safeLinkedList.linkTail(4);
        return safeLinkedList;
    }

    @NonNull
    private List<Integer> toArrayList(@NonNull SafeLinkedList<Integer> safeLinkedList) {
        Optional<SafeLinkedList.Node<Integer>> first = safeLinkedList.peekFirst();
        List<Integer> list = new ArrayList<>();

        while (first.isPresent()) {
            list.add(first.get().item);
            first = first.get().next;
        }
        return list;
    }

    @Nonnull
    private List<Integer> toArrayListReversed(@NonNull SafeLinkedList<Integer> safeLinkedList) {
        Optional<SafeLinkedList.Node<Integer>> last = safeLinkedList.peekLast();
        List<Integer> list = new ArrayList<>();

        while (last.isPresent()) {
            list.add(last.get().item);
            last = last.get().prev;
        }
        return list;
    }
}
