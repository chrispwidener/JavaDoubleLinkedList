/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package DLL;

import org.checkerframework.checker.nullness.qual.NonNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Nonnull;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

// NPEs here would be considered failures, so no need to guard against them
@SuppressWarnings("ConstantConditions")
class DLLTest {

    private DLL<Integer> dll;

    @BeforeEach
    void setup() {
        dll = new DLL<Integer>();
    }

    @Test
    void WHEN_ListIsEmpty_AND_linkHeadVal_THEN_UnlinkHeadEqualsVal() {
        dll.linkHead(1);

        assertEquals(1, dll.unlinkHead());
    }

    @Test
    void WHEN_ListIsEmpty_AND_linkTailVal_THEN_UnlinkTailEqualsVal() {
        dll.linkTail(5);
        dll.linkTail(2);

        assertEquals(2, dll.unlinkTail());
    }

    @Test
    void GIVEN_list_is_empty_WHEN_val_is_added_THEN_head_and_tail_are_both_val() {
        dll.linkHead(1);

        assertEquals(1, dll.peakHead().item);
        assertEquals(1, dll.peakTail().item);

        dll = new DLL<Integer>();

        dll.linkTail(2);

        assertEquals(2, dll.peakHead().item);
        assertEquals(2, dll.peakTail().item);
    }

    @Test
    void WHEN_ListIs1234_AND_unlinkHeadX4_THEN_EachIs1234() {
        dll = get1234LL();

        assertEquals(1,dll.unlinkHead());
        assertEquals(2,dll.unlinkHead());
        assertEquals(3,dll.unlinkHead());
        assertEquals(4,dll.unlinkHead());
    }

    @Test
    void GIVEN_dll_is_empty_WHEN_val_is_unlinked_THEN_unlink_should_return_null() {
        assertNull(dll.unlinkHead());
        assertNull(dll.unlinkTail());
    }

    @Test
    void GIVEN_dll_is_empty_WHEN_unlinked_THEN_size_should_be_zero() {
        dll.unlinkTail();

        assertEquals(0, dll.getLength());

        dll = new DLL<Integer>();
        dll.unlinkHead();

        assertEquals(0, dll.getLength());
    }

    @Test
    void GIVEN_dll_has_one_val_WHEN_val_is_unlinked_THEN_head_and_tail_are_both_null() {
        dll.linkHead(1);

        dll.unlinkHead();

        assertNull(dll.peakHead());
        assertNull(dll.peakTail());

        dll = new DLL<Integer>();
        dll.linkHead(2);

        dll.unlinkTail();

        assertNull(dll.peakHead());
        assertNull(dll.peakTail());
    }

    @Test
    void WHEN_a_value_is_unlinked_THEN_it_should_not_be_leaked() {
        dll = get1234LL();
        assertEquals(Arrays.asList(1, 2, 3, 4), getValuesForward(dll));

        dll.unlinkTail();

        assertEquals(Arrays.asList(1, 2, 3), getValuesForward(dll));

        dll = get1234LL();
        assertEquals(Arrays.asList(1, 2, 3, 4), getValuesBackward(dll));

        dll.unlinkHead();

        assertEquals(Arrays.asList(2, 3, 4), getValuesBackward(dll));
    }

    @Test
    void WHEN_dll_is_populated_and_values_are_unlinked_THEN_head_and_tail_should_be_correct() {
        dll = get1234LL();

        assertEquals(1, dll.peakHead().item);
        assertEquals(4, dll.peakTail().item);

        dll.unlinkHead();

        assertEquals(2, dll.peakHead().item);
        assertEquals(4, dll.peakTail().item);

        dll.unlinkTail();

        assertEquals(2, dll.peakHead().item);
        assertEquals(3, dll.peakTail().item);
    }

    // Utility
    private DLL<Integer> get1234LL () {
        DLL<Integer> dll = new DLL();
        dll.linkTail(1);
        dll.linkTail(2);
        dll.linkTail(3);
        dll.linkTail(4);
        return dll;
    }

    @NonNull
    private List<Integer> getValuesForward(@NonNull DLL<Integer> dll) {
        DLL.Node<Integer> head = dll.peakHead();
        List<Integer> list = new ArrayList<>();

        while (head != null) {
            list.add(head.item);
            head = head.next;
        }
        return list;
    }

    @Nonnull
    private List<Integer> getValuesBackward(@NonNull DLL<Integer> dll) {
        DLL.Node<Integer> tail = dll.peakTail();
        List<Integer> list = new ArrayList<>();

        while (tail != null) {
            list.add(tail.item);
            tail = tail.prev;
        }
        return list;
    }
}
